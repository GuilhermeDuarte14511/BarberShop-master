// <auto-generated />
using System;
using BarberShop.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BarberShop.Infrastructure.MigrationsPostgres
{
    [DbContext(typeof(BarbeariaContext))]
    [Migration("20250814135711_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarberShop.Domain.Entities.Agendamento", b =>
                {
                    b.Property<int>("AgendamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("agendamento_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AgendamentoId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<int>("BarbeiroId")
                        .HasColumnType("integer")
                        .HasColumnName("barbeiro_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_hora");

                    b.Property<int?>("DuracaoTotal")
                        .HasColumnType("integer")
                        .HasColumnName("duracao_total");

                    b.Property<bool?>("EmailEnviado")
                        .HasColumnType("boolean")
                        .HasColumnName("email_enviado");

                    b.Property<string>("FormaPagamento")
                        .HasColumnType("text")
                        .HasColumnName("forma_pagamento");

                    b.Property<decimal?>("PrecoTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("preco_total");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("AgendamentoId")
                        .HasName("pk_agendamentos");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_agendamentos_barbearia_id");

                    b.HasIndex("BarbeiroId")
                        .HasDatabaseName("ix_agendamentos_barbeiro_id");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("ix_agendamentos_cliente_id");

                    b.ToTable("agendamentos", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.AgendamentoServico", b =>
                {
                    b.Property<int>("AgendamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("agendamento_id")
                        .HasColumnOrder(0);

                    b.Property<int>("ServicoId")
                        .HasColumnType("integer")
                        .HasColumnName("servico_id")
                        .HasColumnOrder(1);

                    b.HasKey("AgendamentoId", "ServicoId")
                        .HasName("pk_agendamento_servicos");

                    b.HasIndex("ServicoId")
                        .HasDatabaseName("ix_agendamento_servicos_servico_id");

                    b.ToTable("agendamento_servicos", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<int>("AvaliacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("avaliacao_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AvaliacaoId"));

                    b.Property<int>("AgendamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("agendamento_id");

                    b.Property<DateTime>("DataAvaliado")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_avaliado");

                    b.Property<int>("NotaBarbeiro")
                        .HasColumnType("integer")
                        .HasColumnName("nota_barbeiro");

                    b.Property<int>("NotaServico")
                        .HasColumnType("integer")
                        .HasColumnName("nota_servico");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observacao");

                    b.HasKey("AvaliacaoId")
                        .HasName("pk_avaliacao");

                    b.HasIndex("AgendamentoId")
                        .HasDatabaseName("ix_avaliacao_agendamento_id");

                    b.ToTable("avaliacao", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Barbearia", b =>
                {
                    b.Property<int>("BarbeariaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BarbeariaId"));

                    b.Property<string>("AccountIdStripe")
                        .HasColumnType("text")
                        .HasColumnName("account_id_stripe");

                    b.Property<string>("CEP")
                        .HasColumnType("text")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<string>("HorarioFuncionamento")
                        .HasColumnType("text")
                        .HasColumnName("horario_funcionamento");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("bytea")
                        .HasColumnName("logo");

                    b.Property<string>("Nome")
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("text")
                        .HasColumnName("url_slug");

                    b.HasKey("BarbeariaId")
                        .HasName("pk_barbearias");

                    b.HasIndex("UrlSlug")
                        .IsUnique()
                        .HasDatabaseName("ix_barbearias_url_slug");

                    b.ToTable("barbearias", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Barbeiro", b =>
                {
                    b.Property<int>("BarbeiroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("barbeiro_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BarbeiroId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea")
                        .HasColumnName("foto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.HasKey("BarbeiroId")
                        .HasName("pk_barbeiros");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_barbeiros_barbearia_id");

                    b.ToTable("barbeiros", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.BarbeiroServico", b =>
                {
                    b.Property<int>("BarbeiroId")
                        .HasColumnType("integer")
                        .HasColumnName("barbeiro_id");

                    b.Property<int>("ServicoId")
                        .HasColumnType("integer")
                        .HasColumnName("servico_id");

                    b.HasKey("BarbeiroId", "ServicoId")
                        .HasName("pk_barbeiro_servicos");

                    b.HasIndex("ServicoId")
                        .HasDatabaseName("ix_barbeiro_servicos_servico_id");

                    b.ToTable("barbeiro_servicos", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClienteId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<string>("CodigoValidacao")
                        .HasColumnType("text")
                        .HasColumnName("codigo_validacao");

                    b.Property<DateTime?>("CodigoValidacaoExpiracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("codigo_validacao_expiracao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Senha")
                        .HasColumnType("text")
                        .HasColumnName("senha");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<DateTime?>("TokenExpiracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("token_expiracao");

                    b.Property<string>("TokenRecuperacaoSenha")
                        .HasColumnType("text")
                        .HasColumnName("token_recuperacao_senha");

                    b.HasKey("ClienteId")
                        .HasName("pk_clientes");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_clientes_barbearia_id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.FeriadoBarbearia", b =>
                {
                    b.Property<int>("FeriadoBarbeariaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feriado_barbearia_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeriadoBarbeariaId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descricao");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("boolean")
                        .HasColumnName("recorrente");

                    b.HasKey("FeriadoBarbeariaId")
                        .HasName("pk_feriados_barbearias");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_feriados_barbearias_barbearia_id");

                    b.ToTable("feriados_barbearias", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.FeriadoNacional", b =>
                {
                    b.Property<int>("FeriadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feriado_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeriadoId"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descricao");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("boolean")
                        .HasColumnName("recorrente");

                    b.HasKey("FeriadoId")
                        .HasName("pk_feriados_nacionais");

                    b.ToTable("feriados_nacionais", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.GraficoPosicao", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("GraficoId")
                        .HasColumnType("text")
                        .HasColumnName("grafico_id");

                    b.Property<int?>("Posicao")
                        .HasColumnType("integer")
                        .HasColumnName("posicao");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_grafico_posicao");

                    b.ToTable("grafico_posicao", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.IndisponibilidadeBarbeiro", b =>
                {
                    b.Property<int>("IndisponibilidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("indisponibilidade_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IndisponibilidadeId"));

                    b.Property<int>("BarbeiroId")
                        .HasColumnType("integer")
                        .HasColumnName("barbeiro_id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicio");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("motivo");

                    b.HasKey("IndisponibilidadeId")
                        .HasName("pk_indisponibilidades_barbeiros");

                    b.HasIndex("BarbeiroId")
                        .HasDatabaseName("ix_indisponibilidades_barbeiros_barbeiro_id");

                    b.ToTable("indisponibilidades_barbeiros", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Log", b =>
                {
                    b.Property<int?>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("LogId"));

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime?>("LogDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("log_date_time");

                    b.Property<string>("LogLevel")
                        .HasColumnType("text")
                        .HasColumnName("log_level");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("ResourceID")
                        .HasColumnType("text")
                        .HasColumnName("resource_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("LogId")
                        .HasName("pk_logs");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Pagamento", b =>
                {
                    b.Property<int?>("PagamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pagamento_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("PagamentoId"));

                    b.Property<int?>("AgendamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("agendamento_id");

                    b.Property<int?>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_pagamento");

                    b.Property<string>("PaymentId")
                        .HasColumnType("text")
                        .HasColumnName("payment_id");

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("status_pagamento");

                    b.Property<decimal?>("ValorPago")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("valor_pago");

                    b.HasKey("PagamentoId")
                        .HasName("pk_pagamentos");

                    b.HasIndex("AgendamentoId")
                        .IsUnique()
                        .HasDatabaseName("ix_pagamentos_agendamento_id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_pagamentos_barbearia_id");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("ix_pagamentos_cliente_id");

                    b.ToTable("pagamentos", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PagamentoAssinatura", b =>
                {
                    b.Property<int>("AssinaturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("assinatura_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssinaturaId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_pagamento");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_cliente");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome_cliente");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_id");

                    b.Property<string>("StatusPagamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_pagamento");

                    b.Property<string>("TelefoneCliente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone_cliente");

                    b.Property<decimal>("ValorPago")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("valor_pago");

                    b.HasKey("AssinaturaId")
                        .HasName("pk_pagamentos_assinaturas_site");

                    b.ToTable("pagamentos_assinaturas_site", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PlanoAssinaturaBarbearia", b =>
                {
                    b.Property<int>("PlanoBarbeariaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("plano_barbearia_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanoBarbeariaId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Periodicidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("periodicidade");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("PlanoBarbeariaId")
                        .HasName("pk_plano_assinatura_barbearias");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_plano_assinatura_barbearias_barbearia_id");

                    b.ToTable("plano_assinatura_barbearias", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PlanoAssinaturaSistema", b =>
                {
                    b.Property<int>("PlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("plano_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanoId"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<string>("IdProdutoStripe")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_produto_stripe");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Periodicidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("periodicidade");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("price_id");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("PlanoId")
                        .HasName("pk_plano_assinatura_sistema");

                    b.ToTable("plano_assinatura_sistema", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PlanoBeneficio", b =>
                {
                    b.Property<int>("PlanoBeneficioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("plano_beneficio_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanoBeneficioId"));

                    b.Property<int>("PlanoBarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("plano_barbearia_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade");

                    b.Property<int>("ServicoId")
                        .HasColumnType("integer")
                        .HasColumnName("servico_id");

                    b.HasKey("PlanoBeneficioId")
                        .HasName("pk_plano_beneficios");

                    b.HasIndex("PlanoBarbeariaId")
                        .HasDatabaseName("ix_plano_beneficios_plano_barbearia_id");

                    b.HasIndex("ServicoId")
                        .HasDatabaseName("ix_plano_beneficios_servico_id");

                    b.ToTable("plano_beneficios", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endpoint");

                    b.Property<string>("P256dh")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("p256dh");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_push_subscriptions");

                    b.ToTable("push_subscriptions", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.RelatorioPersonalizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Configuracoes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("configuracoes");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<int>("PeriodoDias")
                        .HasColumnType("integer")
                        .HasColumnName("periodo_dias");

                    b.Property<string>("TipoRelatorio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_relatorio");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_relatorios_personalizados");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_relatorios_personalizados_usuario_id");

                    b.ToTable("relatorios_personalizados", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Servico", b =>
                {
                    b.Property<int>("ServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("servico_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServicoId"));

                    b.Property<int?>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<int>("Duracao")
                        .HasColumnType("integer")
                        .HasColumnName("duracao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<float>("Preco")
                        .HasColumnType("real")
                        .HasColumnName("preco");

                    b.HasKey("ServicoId")
                        .HasName("pk_servicos");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_servicos_barbearia_id");

                    b.ToTable("servicos", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioId"));

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<int?>("BarbeiroId")
                        .HasColumnType("integer")
                        .HasColumnName("barbeiro_id");

                    b.Property<string>("CodigoValidacao")
                        .HasColumnType("text")
                        .HasColumnName("codigo_validacao");

                    b.Property<DateTime?>("CodigoValidacaoExpiracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("codigo_validacao_expiracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("senha_hash");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telefone");

                    b.Property<DateTime?>("TokenExpiracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("token_expiracao");

                    b.Property<string>("TokenRecuperacaoSenha")
                        .HasColumnType("text")
                        .HasColumnName("token_recuperacao_senha");

                    b.HasKey("UsuarioId")
                        .HasName("pk_usuarios");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_usuarios_barbearia_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_email");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Notificacao", b =>
                {
                    b.Property<int>("NotificacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notificacao_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificacaoId"));

                    b.Property<int?>("AgendamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("agendamento_id");

                    b.Property<int>("BarbeariaId")
                        .HasColumnType("integer")
                        .HasColumnName("barbearia_id");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_hora");

                    b.Property<bool>("Lida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("lida");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("link");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("mensagem");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("NotificacaoId")
                        .HasName("pk_notificacoes");

                    b.HasIndex("AgendamentoId")
                        .HasDatabaseName("ix_notificacoes_agendamento_id");

                    b.HasIndex("BarbeariaId")
                        .HasDatabaseName("ix_notificacoes_barbearia_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_notificacoes_usuario_id");

                    b.ToTable("notificacoes", (string)null);
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Agendamento", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany("Agendamentos")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_agendamentos_barbearias_barbearia_id");

                    b.HasOne("BarberShop.Domain.Entities.Barbeiro", "Barbeiro")
                        .WithMany()
                        .HasForeignKey("BarbeiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamentos_barbeiros_barbeiro_id");

                    b.HasOne("BarberShop.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamentos_clientes_cliente_id");

                    b.Navigation("Barbearia");

                    b.Navigation("Barbeiro");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.AgendamentoServico", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Agendamento", "Agendamento")
                        .WithMany("AgendamentoServicos")
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamento_servicos_agendamentos_agendamento_id");

                    b.HasOne("BarberShop.Domain.Entities.Servico", "Servico")
                        .WithMany("AgendamentoServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamento_servicos_servicos_servico_id");

                    b.Navigation("Agendamento");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Agendamento", "Agendamento")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_avaliacao_agendamentos_agendamento_id");

                    b.Navigation("Agendamento");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Barbeiro", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany("Barbeiros")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_barbeiros_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.BarbeiroServico", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbeiro", "Barbeiro")
                        .WithMany("BarbeiroServicos")
                        .HasForeignKey("BarbeiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_barbeiro_servicos_barbeiros_barbeiro_id");

                    b.HasOne("BarberShop.Domain.Entities.Servico", "Servico")
                        .WithMany("BarbeiroServicos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_barbeiro_servicos_servicos_servico_id");

                    b.Navigation("Barbeiro");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_clientes_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.FeriadoBarbearia", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany("FeriadosBarbearias")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feriados_barbearias_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.IndisponibilidadeBarbeiro", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbeiro", "Barbeiro")
                        .WithMany("Indisponibilidades")
                        .HasForeignKey("BarbeiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_indisponibilidades_barbeiros_barbeiros_barbeiro_id");

                    b.Navigation("Barbeiro");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Pagamento", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Agendamento", "Agendamento")
                        .WithOne("Pagamento")
                        .HasForeignKey("BarberShop.Domain.Entities.Pagamento", "AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pagamentos_agendamentos_agendamento_id");

                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pagamentos_barbearias_barbearia_id");

                    b.HasOne("BarberShop.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("fk_pagamentos_clientes_cliente_id");

                    b.Navigation("Agendamento");

                    b.Navigation("Barbearia");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PlanoAssinaturaBarbearia", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany("PlanosAssinaturaBarbearias")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_plano_assinatura_barbearias_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.PlanoBeneficio", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.PlanoAssinaturaBarbearia", "PlanoAssinaturaBarbearia")
                        .WithMany()
                        .HasForeignKey("PlanoBarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plano_beneficios_plano_assinatura_barbearias_plano_barbeari");

                    b.HasOne("BarberShop.Domain.Entities.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_plano_beneficios_servicos_servico_id");

                    b.Navigation("PlanoAssinaturaBarbearia");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.RelatorioPersonalizado", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Usuario", "Usuario")
                        .WithMany("RelatoriosPersonalizados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relatorios_personalizados_usuarios_usuario_id");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Servico", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany("Servicos")
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_servicos_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuarios_barbearias_barbearia_id");

                    b.Navigation("Barbearia");
                });

            modelBuilder.Entity("Notificacao", b =>
                {
                    b.HasOne("BarberShop.Domain.Entities.Agendamento", "Agendamento")
                        .WithMany()
                        .HasForeignKey("AgendamentoId")
                        .HasConstraintName("fk_notificacoes_agendamentos_agendamento_id");

                    b.HasOne("BarberShop.Domain.Entities.Barbearia", "Barbearia")
                        .WithMany()
                        .HasForeignKey("BarbeariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificacoes_barbearias_barbearia_id");

                    b.HasOne("BarberShop.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notificacoes_usuarios_usuario_id");

                    b.Navigation("Agendamento");

                    b.Navigation("Barbearia");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Agendamento", b =>
                {
                    b.Navigation("AgendamentoServicos");

                    b.Navigation("Avaliacoes");

                    b.Navigation("Pagamento")
                        .IsRequired();
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Barbearia", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Barbeiros");

                    b.Navigation("FeriadosBarbearias");

                    b.Navigation("PlanosAssinaturaBarbearias");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Barbeiro", b =>
                {
                    b.Navigation("BarbeiroServicos");

                    b.Navigation("Indisponibilidades");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Servico", b =>
                {
                    b.Navigation("AgendamentoServicos");

                    b.Navigation("BarbeiroServicos");
                });

            modelBuilder.Entity("BarberShop.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("RelatoriosPersonalizados");
                });
#pragma warning restore 612, 618
        }
    }
}
